Index: sigmah/src/main/java/org/sigmah/server/schedule/export/AutoExportJob.java
===================================================================
--- sigmah/src/main/java/org/sigmah/server/schedule/export/AutoExportJob.java	(revision 1561)
+++ sigmah/src/main/java/org/sigmah/server/schedule/export/AutoExportJob.java	(working copy)
@@ -71,24 +71,46 @@
 				if(setting.getAutoExportFrequency()==null 
 						|| setting.getAutoExportFrequency()<1) continue;
 				
-				final Calendar systemCalendar = Calendar.getInstance();
-				final Calendar scheduledCalendar = Calendar.getInstance();
+				final Calendar systemCalendar = Calendar.getInstance();			
 				
- 				Date lastExportDate = setting.getLastExportDate();
-				if(lastExportDate==null){
-					lastExportDate = systemCalendar.getTime();
-					setting.setLastExportDate(lastExportDate);
-					em.merge(setting);
+				boolean doExport = false;
+									
+				if( (setting.getAutoExportFrequency()>=31) && (setting.getAutoExportFrequency()<=58)){
+					//Case of Monthly Auto Export
+					if((setting.getAutoExportFrequency()-30) == systemCalendar.get(Calendar.DAY_OF_MONTH)){
+						doExport = true;
+					}
+				}else if((setting.getAutoExportFrequency() >= 61) && (setting.getAutoExportFrequency() <=67)){
+					//Case of Weekly Auto Export
+					if((setting.getAutoExportFrequency()-60) == systemCalendar.get(Calendar.DAY_OF_WEEK)){
+						doExport = true;
+					}
+					
 				}else{
-					scheduledCalendar.setTime(lastExportDate);
-					// add scheduled days to the last exported date
-					scheduledCalendar.add(Calendar.DAY_OF_MONTH,setting.getAutoExportFrequency());
+					//Regular Auto-Export every N-days
+					
+					final Calendar scheduledCalendar = Calendar.getInstance();
+	 				Date lastExportDate = setting.getLastExportDate();
+					if(lastExportDate==null){
+						lastExportDate = systemCalendar.getTime();
+						setting.setLastExportDate(lastExportDate);
+						em.merge(setting);
+					}else{
+						scheduledCalendar.setTime(lastExportDate);
+						// add scheduled days to the last exported date
+						scheduledCalendar.add(Calendar.DAY_OF_MONTH,setting.getAutoExportFrequency());
+					}
+													
+					final Date systemDate=getZeroTimeDate(systemCalendar.getTime());
+					final Date scheduledDate=getZeroTimeDate(scheduledCalendar.getTime());
+					
+					if(systemDate.compareTo(scheduledDate)>=0){
+						doExport = true;
+					}
 				}
-												
-				final Date systemDate=getZeroTimeDate(systemCalendar.getTime());
-				final Date scheduledDate=getZeroTimeDate(scheduledCalendar.getTime());
+				
 				 
-				if(systemDate.compareTo(scheduledDate)>=0){ 
+				if(doExport){ 
 					/*
 					 * Start auto export  
 					 */
Index: sigmah/src/main/java/org/sigmah/client/ui/GlobalExportSettingsForm.java
===================================================================
--- sigmah/src/main/java/org/sigmah/client/ui/GlobalExportSettingsForm.java	(revision 1561)
+++ sigmah/src/main/java/org/sigmah/client/ui/GlobalExportSettingsForm.java	(working copy)
@@ -27,6 +27,7 @@
 
 import com.extjs.gxt.ui.client.Style.Orientation;
 import com.extjs.gxt.ui.client.data.BaseModelData;
+import com.extjs.gxt.ui.client.event.BaseEvent;
 import com.extjs.gxt.ui.client.event.ButtonEvent;
 import com.extjs.gxt.ui.client.event.Events;
 import com.extjs.gxt.ui.client.event.FieldEvent;
@@ -96,15 +97,72 @@
 	private final Map<Integer, Boolean> fieldsMap;
 	private final List<SimpleComboBoxData> autoExportSchedules;
 	private final List<SimpleComboBoxData> autoDeleteSchedules;
+	private final List<SimpleComboBoxData> autoExportMonthlySchedules;
+	private final List<SimpleComboBoxData> autoExportWeeklySchedules;
+	
 	private final static Map<Integer, SimpleComboBoxData> exportScheduleMap;
 	private final static Map<Integer, SimpleComboBoxData> deleteScheduleMap;
+	private final static Map<Integer, SimpleComboBoxData> monthScheduleMap;
+	private final static Map<Integer, SimpleComboBoxData> weekScheduleMap;
+	
 	static {
 		exportScheduleMap = new HashMap<Integer, SimpleComboBoxData>();
-		exportScheduleMap.put(0, new SimpleComboBoxData(0, I18N.CONSTANTS.notScheduled()));
+		exportScheduleMap.put(0, new SimpleComboBoxData(0,I18N.CONSTANTS.notScheduled()));
 		exportScheduleMap.put(1, new SimpleComboBoxData(1, I18N.CONSTANTS.daily()));
 		exportScheduleMap.put(3, new SimpleComboBoxData(3, I18N.MESSAGES.everyXDays("3")));
 		exportScheduleMap.put(9, new SimpleComboBoxData(9, I18N.MESSAGES.everyXDays("9")));
 		exportScheduleMap.put(15, new SimpleComboBoxData(15, I18N.MESSAGES.everyXDays("15")));
+		exportScheduleMap.put(31, new SimpleComboBoxData(31, I18N.CONSTANTS.everyMonth())); //In this case take value from monthMap
+		exportScheduleMap.put(61, new SimpleComboBoxData(61, I18N.CONSTANTS.everyWeek())); //In this case take value from weekMap
+
+		
+		// The number space of 31-58 is reserved for month dates in monthyExport settings. 
+		// 31 represents the first day of the month, 32 the second day and so on
+		// Only 28 days as considered as they are common in every month of the year
+		monthScheduleMap = new HashMap<Integer, SimpleComboBoxData>();
+		monthScheduleMap.put(31, new SimpleComboBoxData(31, I18N.CONSTANTS.number_1()));
+		monthScheduleMap.put(32, new SimpleComboBoxData(32, I18N.CONSTANTS.number_2()));
+		monthScheduleMap.put(33, new SimpleComboBoxData(33, I18N.CONSTANTS.number_3()));
+		monthScheduleMap.put(34, new SimpleComboBoxData(34, I18N.CONSTANTS.number_4()));
+		monthScheduleMap.put(35, new SimpleComboBoxData(35, I18N.CONSTANTS.number_5()));
+		monthScheduleMap.put(36, new SimpleComboBoxData(36, I18N.CONSTANTS.number_6()));
+		monthScheduleMap.put(37, new SimpleComboBoxData(37, I18N.CONSTANTS.number_7()));
+		monthScheduleMap.put(38, new SimpleComboBoxData(38, I18N.CONSTANTS.number_8()));
+		monthScheduleMap.put(39, new SimpleComboBoxData(39, I18N.CONSTANTS.number_9()));
+		monthScheduleMap.put(40, new SimpleComboBoxData(40, I18N.CONSTANTS.number_10()));
+		monthScheduleMap.put(41, new SimpleComboBoxData(41, I18N.CONSTANTS.number_11()));
+		monthScheduleMap.put(42, new SimpleComboBoxData(42, I18N.CONSTANTS.number_12()));
+		monthScheduleMap.put(43, new SimpleComboBoxData(43, I18N.CONSTANTS.number_13()));
+		monthScheduleMap.put(44, new SimpleComboBoxData(44, I18N.CONSTANTS.number_14()));
+		monthScheduleMap.put(45, new SimpleComboBoxData(45, I18N.CONSTANTS.number_15()));
+		monthScheduleMap.put(46, new SimpleComboBoxData(46, I18N.CONSTANTS.number_16()));
+		monthScheduleMap.put(47, new SimpleComboBoxData(47, I18N.CONSTANTS.number_17()));
+		monthScheduleMap.put(48, new SimpleComboBoxData(48, I18N.CONSTANTS.number_18()));
+		monthScheduleMap.put(49, new SimpleComboBoxData(49, I18N.CONSTANTS.number_19()));
+		monthScheduleMap.put(50, new SimpleComboBoxData(50, I18N.CONSTANTS.number_20()));
+		monthScheduleMap.put(51, new SimpleComboBoxData(51, I18N.CONSTANTS.number_21()));
+		monthScheduleMap.put(52, new SimpleComboBoxData(52, I18N.CONSTANTS.number_22()));
+		monthScheduleMap.put(53, new SimpleComboBoxData(53, I18N.CONSTANTS.number_23()));
+		monthScheduleMap.put(54, new SimpleComboBoxData(54, I18N.CONSTANTS.number_24()));
+		monthScheduleMap.put(55, new SimpleComboBoxData(55, I18N.CONSTANTS.number_25()));
+		monthScheduleMap.put(56, new SimpleComboBoxData(56, I18N.CONSTANTS.number_26()));
+		monthScheduleMap.put(57, new SimpleComboBoxData(57, I18N.CONSTANTS.number_27()));
+		monthScheduleMap.put(58, new SimpleComboBoxData(58, I18N.CONSTANTS.number_28()));
+		
+		
+		//The number space 61-67 is reserved to denote weekly export schedule 
+		// 61 represents sunday, 62 monday and so on
+		weekScheduleMap = new HashMap<Integer, SimpleComboBoxData>();
+		weekScheduleMap.put(61, new SimpleComboBoxData(61, I18N.CONSTANTS.dayName_1()));
+		weekScheduleMap.put(62, new SimpleComboBoxData(62, I18N.CONSTANTS.dayName_2()));
+		weekScheduleMap.put(63, new SimpleComboBoxData(63, I18N.CONSTANTS.dayName_3()));
+		weekScheduleMap.put(64, new SimpleComboBoxData(64, I18N.CONSTANTS.dayName_4()));
+		weekScheduleMap.put(65, new SimpleComboBoxData(65, I18N.CONSTANTS.dayName_5()));
+		weekScheduleMap.put(66, new SimpleComboBoxData(66, I18N.CONSTANTS.dayName_6()));
+		weekScheduleMap.put(67, new SimpleComboBoxData(67, I18N.CONSTANTS.dayName_7()));
+		
+		
+		
 
 		deleteScheduleMap = new HashMap<Integer, SimpleComboBoxData>();
 		deleteScheduleMap.put(0, new SimpleComboBoxData(0, I18N.CONSTANTS.notScheduled()));
@@ -129,6 +187,17 @@
 		for (Integer value : deleteScheduleMap.keySet()) {
 			autoDeleteSchedules.add(deleteScheduleMap.get(value));
 		}
+		
+		autoExportMonthlySchedules = new ArrayList<SimpleComboBoxData>();
+		for (Integer value : monthScheduleMap.keySet()) {
+			autoExportMonthlySchedules.add(monthScheduleMap.get(value));
+		}
+		autoExportWeeklySchedules = new ArrayList<SimpleComboBoxData>();
+		for (Integer value : weekScheduleMap.keySet()) {
+			autoExportWeeklySchedules.add(weekScheduleMap.get(value));
+		}
+		
+		
 
 		final Window w = new Window();
 		w.setPlain(true);
@@ -190,6 +259,37 @@
 		exportScheduleStore.commitChanges();
 		exportSchedulesBox.setValue(exportScheduleMap.get(0));
 		panel.add(exportSchedulesBox);
+		
+		// auto export monthly schedule
+		final ListStore<SimpleComboBoxData> exportMonthlyScheduleStore = new ListStore<SimpleComboBoxData>();
+		final ComboBox<SimpleComboBoxData> exportMonthlySchedulesBox = new ComboBox<SimpleComboBoxData>();
+		exportMonthlySchedulesBox.setFieldLabel(I18N.CONSTANTS.dayInMonth());
+		exportMonthlySchedulesBox.setStore(exportMonthlyScheduleStore);
+		exportMonthlySchedulesBox.setDisplayField("label");
+		exportMonthlySchedulesBox.setValueField("value");
+		exportMonthlySchedulesBox.setEditable(false);
+		exportMonthlySchedulesBox.setTriggerAction(TriggerAction.ALL);
+		exportMonthlyScheduleStore.add(autoExportMonthlySchedules);
+		exportMonthlyScheduleStore.commitChanges();
+		exportMonthlySchedulesBox.setValue(monthScheduleMap.get(31));
+		exportMonthlySchedulesBox.hide();
+		panel.add(exportMonthlySchedulesBox);
+		
+		// auto export Weekly schedule
+		final ListStore<SimpleComboBoxData> exportWeeklyScheduleStore = new ListStore<SimpleComboBoxData>();
+		final ComboBox<SimpleComboBoxData> exportWeeklySchedulesBox = new ComboBox<SimpleComboBoxData>();
+		exportWeeklySchedulesBox.setFieldLabel(I18N.CONSTANTS.dayInWeek());
+		exportWeeklySchedulesBox.setStore(exportWeeklyScheduleStore);
+		exportWeeklySchedulesBox.setDisplayField("label");
+		exportWeeklySchedulesBox.setValueField("value");
+		exportWeeklySchedulesBox.setEditable(false);
+		exportWeeklySchedulesBox.setTriggerAction(TriggerAction.ALL);
+		exportWeeklyScheduleStore.add(autoExportWeeklySchedules);
+		exportWeeklyScheduleStore.commitChanges();
+		exportWeeklySchedulesBox.setValue(weekScheduleMap.get(61));
+		exportWeeklySchedulesBox.hide();
+		panel.add(exportWeeklySchedulesBox);
+		
 
 		// auto delete schedule
 		final ListStore<SimpleComboBoxData> deleteScheduleStore = new ListStore<SimpleComboBoxData>();
@@ -204,6 +304,27 @@
 		deleteScheduleStore.commitChanges();
 		deleteSchedulesBox.setValue(deleteScheduleMap.get(0));
 		panel.add(deleteSchedulesBox);
+		
+		
+		
+		//Add onChange handler for exportSchedulesBox
+		exportSchedulesBox.addListener(Events.Select, new Listener<BaseEvent>() {
+			@Override
+			public void handleEvent(BaseEvent be) {
+				exportMonthlySchedulesBox.hide();
+				exportWeeklySchedulesBox.hide();
+
+				if(exportSchedulesBox.getValue().getValue()==31){ //Case of Monthly Schedule
+					exportMonthlySchedulesBox.show();
+				}else if(exportSchedulesBox.getValue().getValue()==61){ //Case of Weekly Schedule
+					exportWeeklySchedulesBox.show();
+				}else{		
+					//Regular case of every N days
+				}
+			}
+		});
+		//onChange handler for exportSchedulesBox handled
+		
 
 		// button
 		final Button saveButton = new Button(I18N.CONSTANTS.saveExportConfiguration());
@@ -221,7 +342,20 @@
 				if (exportSchedulesBox.getValue() == null || exportSchedulesBox.getValue().getValue() == 0) {
 					settings.setAutoExportFrequency(null);
 				} else {
-					settings.setAutoExportFrequency(exportSchedulesBox.getValue().getValue());
+					
+					if(exportSchedulesBox.getValue().getValue()==31){ //Case of Monthly Schedule
+						// Push the value selected in the Monthly export schedule box
+						// Value between 31-38 (both inclusive)
+						settings.setAutoExportFrequency(exportMonthlySchedulesBox.getValue().getValue());
+					}else if(exportSchedulesBox.getValue().getValue()==61){ //Case of Weekly Schedule
+						// Value between 61-67 (both inclusive)
+						// Push the value selected in the Weekly export schedule box
+						settings.setAutoExportFrequency(exportWeeklySchedulesBox.getValue().getValue());
+					}else{
+						//Regular case of every N days
+						settings.setAutoExportFrequency(exportSchedulesBox.getValue().getValue());
+					}
+					
 				}
 				if (deleteSchedulesBox.getValue() == null || deleteSchedulesBox.getValue().getValue() == 0) {
 					settings.setAutoDeleteFrequency(null);
@@ -283,8 +417,25 @@
 								modelsStore.commitChanges();
 
 								// auto export schdule
-								if (exportScheduleMap.get(result.getAutoExportFrequency()) != null)
-									exportSchedulesBox.setValue(exportScheduleMap.get(result.getAutoExportFrequency()));
+								if (exportScheduleMap.get(result.getAutoExportFrequency()) != null || monthScheduleMap.get(result.getAutoExportFrequency()) != null  ||  weekScheduleMap.get(result.getAutoExportFrequency()) != null){
+								
+									if(result.getAutoExportFrequency()>=31 && result.getAutoExportFrequency() <=58 ){//Case of Monthly Update
+										exportSchedulesBox.setValue(exportScheduleMap.get(31));
+										exportMonthlySchedulesBox.show();	
+										
+										exportMonthlySchedulesBox.setValue(monthScheduleMap.get(result.getAutoExportFrequency()));	
+									}else if(result.getAutoExportFrequency()>=61 && result.getAutoExportFrequency()<=67){//Case of Weekly Update
+										exportSchedulesBox.setValue(exportScheduleMap.get(61));
+										exportWeeklySchedulesBox.show();
+										
+										exportWeeklySchedulesBox.setValue(weekScheduleMap.get(result.getAutoExportFrequency()));				
+									}else{
+										//Regular case of every N-days
+										exportSchedulesBox.setValue(exportScheduleMap.get(result.getAutoExportFrequency()));
+									}
+									
+								}
+								
 								// auto delete schedule
 								if (deleteScheduleMap.get(result.getAutoDeleteFrequency()) != null) {
 									deleteSchedulesBox.setValue(deleteScheduleMap.get(result.getAutoDeleteFrequency()));
Index: sigmah/src/main/java/org/sigmah/client/i18n/UIConstants.properties
===================================================================
--- sigmah/src/main/java/org/sigmah/client/i18n/UIConstants.properties	(revision 1561)
+++ sigmah/src/main/java/org/sigmah/client/i18n/UIConstants.properties	(working copy)
@@ -2388,4 +2388,48 @@
 #Name for permission not included in any catebory
 categoryNotMapped = Not in any Category
 
+#Numbers
+number_1 = 1
+number_2 = 2
+number_3 = 3
+number_4 = 4
+number_5 = 5
+number_6 = 6
+number_7 = 7
+number_8 = 8
+number_9 = 9
+number_10 = 10
+number_11 = 11
+number_12 = 12
+number_13 = 13
+number_14 = 14
+number_15 = 15
+number_16 = 16
+number_17 = 17
+number_18 = 18
+number_19 = 19
+number_20 = 20
+number_21 = 21
+number_22 = 22
+number_23 = 23
+number_24 = 24
+number_25 = 25
+number_26 = 26
+number_27 = 27
+number_28 = 28
+#day names in a week
+dayName_1 = Sunday
+dayName_2 = Monday
+dayName_3 = Tuesday
+dayName_4 = Wednesday
+dayName_5 = Thursday
+dayName_6 = Friday
+dayName_7 = Saturday
+#UI constants for export scheduler
+everyWeek = Every Week
+everyMonth = Every Month
+dayInMonth = Day in Month
+dayInWeek = Day in Week
+
+
 
